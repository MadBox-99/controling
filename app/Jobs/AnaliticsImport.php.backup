<?php

declare(strict_types=1);

namespace App\Jobs;

use App\Enums\GoogleAnalitycs\OrderByType;
use App\Models\AnalyticsSession;
use App\Models\AnalyticsSettings;
use App\Models\Settings;
use Carbon\Carbon;
use Filament\Notifications\Notification;
use Google\Client;
use Google\Service\AnalyticsData;
use Google\Service\AnalyticsData\DateRange;
use Google\Service\AnalyticsData\Dimension;
use Google\Service\AnalyticsData\DimensionOrderBy;
use Google\Service\AnalyticsData\Metric;
use Google\Service\AnalyticsData\MetricOrderBy;
use Google\Service\AnalyticsData\OrderBy;
use Google\Service\AnalyticsData\RunReportRequest;
use Google\Service\AnalyticsData\RunReportResponse;
use Illuminate\Bus\Batchable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;
use Illuminate\Support\Facades\Storage;

final class AnaliticsImport implements ShouldQueue
{
    use Batchable;
    use Queueable;

    /**
     * Create a new job instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        $settings = Settings::query()->first();

        if (! $settings || ! $settings->google_service_account) {
            Notification::make()
                ->title('Google Service Account credentials not configured.')
                ->body('Please configure the credentials in Settings first.')
                ->danger()
                ->send();

            $this->fail('Google Service Account credentials not configured.');
        }

        if (! $settings->property_id) {
            Notification::make()
                ->title('GA4 Property ID not configured.')
                ->body('Please configure the Property ID in Settings first.')
                ->danger()
                ->send();

            $this->fail('GA4 Property ID not configured.');
        }

        $analyticsSettings = AnalyticsSettings::query()->first();

        if (! $analyticsSettings) {
            Notification::make()
                ->title('Analytics Settings not configured.')
                ->body('Please configure dimensions, metrics, and order by in Analytics Settings first.')
                ->danger()
                ->send();

            $this->fail('Analytics Settings not configured.');
        }

        $client = new Client();
        $client->useApplicationDefaultCredentials();
        $client->setScopes(['https://www.googleapis.com/auth/analytics.readonly']);
        $client->setAuthConfig(Storage::json($settings->google_service_account));
        $service = new AnalyticsData($client);

        $dateRange = new DateRange();
        $dateRange->setStartDate('2023-01-01');
        $dateRange->setEndDate('today');

        // Build dimensions from settings
        $dimensions = collect($analyticsSettings->dimensions ?? [])
            ->map(function (array $dimensionConfig) {
                $dimension = new Dimension();
                $dimension->setName($dimensionConfig['name']);

                return $dimension;
            })
            ->all();

        // Build metrics from settings
        $metrics = collect($analyticsSettings->metrics ?? [])
            ->map(function (array $metricConfig) {
                $metric = new Metric();
                $metric->setName($metricConfig['name']);

                return $metric;
            })
            ->all();
        $orderBy = [];
        // Build order by from settings
        if ($analyticsSettings->order_by_type === OrderByType::METRIC) {
            $orderBy = [
                new OrderBy([
                    'metric' => new MetricOrderBy(['metric_name' => $analyticsSettings->order_by]),
                    'desc' => $analyticsSettings->order_by_direction === 'desc',
                ]),
            ];
        }
        if ($analyticsSettings->order_by_type === OrderByType::DIMENSION) {
            $orderBy = [
                new OrderBy([
                    'dimension' => new DimensionOrderBy(['dimension_name' => $analyticsSettings->order_by]),
                    'desc' => $analyticsSettings->order_by_direction === 'desc',
                ]),
            ];
        }

        $request = new RunReportRequest();
        $request->setDateRanges([$dateRange]);
        $request->setOrderBys([$orderBy]);
        $request->setDimensions($dimensions);
        $request->setMetrics($metrics);
        // @var RunReportResponse $response
        $response = $service->properties
            ->runReport(property: 'properties/'.$settings->property_id, postBody: $request);

        foreach ($response->getRows() as $row) {
            $rowData = [];

            // Add dimensions
            foreach ($row->getDimensionValues() as $index => $dimensionValue) {
                $dimensionName = $response->getDimensionHeaders()[$index]->getName();
                $rowData[$dimensionName] = $dimensionValue->getValue();
            }

            // Add metrics
            foreach ($row->getMetricValues() as $index => $metricValue) {
                $metricName = $response->getMetricHeaders()[$index]->getName();
                $value = $metricValue->getValue();

                $rowData[$metricName] = $value;
            }

            $processedData[] = $rowData;
        }
        $collection = collect($processedData ?? []);
        Notification::make()
            ->title('Manual sync started successfully.')
            ->body('The synchronization process has been initiated.')
            ->success()
            ->send();
        foreach ($collection as $data) {

            $date = isset($data['date']) ? Carbon::createFromFormat('Ymd', $data['date'])->format('Y-m-d') : null;

            AnalyticsSession::updateOrCreate([
                'date' => $date,
            ], [
                'date' => $date,
                'sessions' => $data['sessions'] ?? null,
                'users' => $data['users'] ?? null,
                'new_users' => $data['newUsers'] ?? null,
                'bounce_rate' => $data['bounceRate'] ?? null,
                'avg_session_duration' => $data['avgSessionDuration'] ?? null,
                'pages_per_session' => $data['pagesPerSession'] ?? null,
                'source' => $data['source'] ?? null,
                'medium' => $data['medium'] ?? null,
                'campaign' => $data['campaign'] ?? null,
            ]);
        }

    }
}
